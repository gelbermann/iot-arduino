/* -------------------------------------------------------------------------- */
/*                                    setup                                   */
/* -------------------------------------------------------------------------- */

#include <Servo.h>
#include <SoftwareSerial.h>
#include <PN532_SWHSU.h>
#include <PN532.h>
#include <SPI.h>
#include <Ethernet.h>

/* --------------------------------- globals -------------------------------- */

#define MIN_DIST 10
#define MAX_DIST 2000
#define BAUD 9600
#define OPEN_DOOR_MSG ("OPEN")

// Distance sensor globals
#define echoPin 2 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 3 //attach pin D3 Arduino to pin Trig of HC-SR04

#define echoPin1 A4 // attach pin A4 Arduino to pin Echo of HC-SR04
#define trigPin1 A5 //attach pin A5 Arduino to pin Trig of HC-SR04

#define echoPin2 A2 // attach pin A2 Arduino to pin Echo of HC-SR04
#define trigPin2 A3 //attach pin A3 Arduino to pin Trig of HC-SR04

#define echoPin3 A1 // attach pin A1 Arduino to pin Echo of HC-SR04
#define trigPin3 A0 //attach pin A0 Arduino to pin Trig of HC-SR04
long duration;      // variable for the duration of sound wave travel
int distance;       // variable for the distance measurement

// NFC globals
#define NFC_RX (10)
#define NFC_TX (11)
SoftwareSerial SWSerial(NFC_RX, NFC_TX);
PN532_SWHSU pn532swhsu(SWSerial);
PN532 nfc(pn532swhsu);

// ESP32CAM globals
#define E3C_RX (12)
#define E3C_TX (13)
#define MSG_SUFFIX ('\n')
#define EMPTY_STR ("")
SoftwareSerial esp(E3C_RX, E3C_TX);

// Locks globals
Servo servo[4];
int g_door = 3;
enum e_state
{
    NO_INPUT,
    INPUT_DETECTED,
    DOOR_IS_OPEN,
};
enum e_state STATE = NO_INPUT;

/* ----------------------------- setup functions ---------------------------- */

void setup_distance_sensor()
{
    pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
    pinMode(echoPin, INPUT);  // Sets the echoPin as an INPUT

    pinMode(trigPin1, OUTPUT);                        // Sets the trigPin as an OUTPUT
    pinMode(echoPin1, INPUT);                         // Sets the echoPin as an INPUT
    pinMode(trigPin2, OUTPUT);                        // Sets the trigPin as an OUTPUT
    pinMode(echoPin2, INPUT);                         // Sets the echoPin as an INPUT
    pinMode(trigPin3, OUTPUT);                        // Sets the trigPin as an OUTPUT
    pinMode(echoPin3, INPUT);                         // Sets the echoPin as an INPUT
    Serial.println("Ultrasonic Sensor HC-SR04 Test"); // print some text in Serial Monitor
    Serial.println("with Arduino UNO R3");
}

void setup_nfc()
{
    Serial.println("Hello Maker!");
    nfc.begin();
    uint32_t versiondata = nfc.getFirmwareVersion();

    if (!versiondata)
    {
        Serial.print("Didn't Find PN53x Module");
        while (1)
            ; // Halt
    }

    // Got valid data, print it out!

    Serial.print("Found chip PN5");
    Serial.println((versiondata >> 24) & 0xFF, HEX);

    Serial.print("Firmware ver. ");
    Serial.print((versiondata >> 16) & 0xFF, DEC);

    Serial.print('.');
    Serial.println((versiondata >> 8) & 0xFF, DEC);

    // Configure board to read RFID tags

    nfc.SAMConfig();

    Serial.println("Waiting for an ISO14443A Card ...");
}

void setup_http_communication()
{
}

void setup_esp32cam_comm()
{
    esp.begin(BAUD);
}

/* -------------------------------------------------------------------------- */
/*                               business logic                               */
/* -------------------------------------------------------------------------- */

void open_lock(int door)
{
    Serial.print("Opening lock");
    Serial.println(door);
    servo[door].write(90);
}

int get_door_distance_from_sensor(int door)
{
    int trig;
    int echo;
    switch (door)
    {
    case 0:
        trig = trigPin;
        echo = echoPin;
        break;
    case 1:
        trig = trigPin1;
        echo = echoPin1;
        break;
    case 2:
        trig = trigPin2;
        echo = echoPin2;
        break;
    case 3:
        trig = trigPin3;
        echo = echoPin3;
        break;
    default:
        Serial.print(" WTF ?! there is no such door ");
        Serial.println(door);
        while (1)
            ;
        break;
    }
    Serial.print("measuring distance to door ");
    Serial.println(door);
    // Clears the trigPin condition
    digitalWrite(trig, LOW);
    delayMicroseconds(2);

    // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
    digitalWrite(trig, HIGH);
    delayMicroseconds(10);
    digitalWrite(trig, LOW);

    // Reads the echoPin, returns the sound wave travel time in microseconds
    duration = pulseIn(echo, HIGH);

    // Calculating the distance
    distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)

    // Displays the distance on the Serial Monitor
    Serial.print("Distance: ");
    Serial.print(distance);
    Serial.println(" cm");
    return distance;
}

void state_machine_for_input_detected_state(int door)
{
    uint8_t sensor_dist_from_door;
    if (STATE == INPUT_DETECTED)
    {
        sensor_dist_from_door = get_door_distance_from_sensor(door);
        if (sensor_dist_from_door >= MIN_DIST)
        {
            STATE = DOOR_IS_OPEN;
            delay(2000);
            Serial.println("switching to DOOR_IS_OPEN");
        }
    }
    else if (STATE == DOOR_IS_OPEN && close_lock(door))
    {
        STATE = NO_INPUT;
        Serial.println("switching to NO_INPUT");
    }
}

/* ------------------------------ nfc functions ----------------------------- */

void listen_for_nfc()
{
    boolean success;
    uint8_t sensor_dist_from_door;

    if (STATE == NO_INPUT)
    {
        g_door = random(0, 3);
        success = check_nfc();
        if (success)
        {
            STATE = INPUT_DETECTED;
            Serial.println("switching to INPUT_DETECTED");
            open_lock(g_door);
        }
    }

    else if (STATE == INPUT_DETECTED)
    {
        sensor_dist_from_door = get_door_distance_from_sensor(g_door);
        if (sensor_dist_from_door >= MIN_DIST)
        {
            open_lock(g_door);
            STATE = DOOR_IS_OPEN;
            delay(2000);
            Serial.println("switching to DOOR_IS_OPEN");
        }
    }
    else if (STATE == DOOR_IS_OPEN && close_lock(g_door))
    {
        state_machine_for_input_detected_state(g_door);
    }
}

boolean check_nfc()
{
    boolean success;
    uint8_t uid[] = {0, 0, 0, 0, 0, 0, 0}; // Buffer to store the returned UID
    uint8_t uidLength;                     // Length of the UID (4 or 7 bytes depending on ISO14443A card type)

    success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength);
    if (success)
    {
        // TODO: verify nfc results against webserver, get locker information for webserver
        Serial.println("Found A Card!");

        Serial.print("UID Length: ");
        Serial.print(uidLength, DEC);
        Serial.println(" bytes");

        Serial.print("UID Value: ");
        for (uint8_t i = 0; i < uidLength; i++)
        {
            Serial.print(" 0x");
            Serial.print(uid[i], HEX);
        }

        Serial.println("");
        delay(500);
    }
    else
    {
        // PN532 probably timed out waiting for a card
        // Serial.println("Timed out! Waiting for a card...");
    }
    return success;
}

boolean close_lock(int door)
{
    if (servo[door].read() != 0 && distance_okay_to_close_lock(door))
    {
        Serial.print("Closing lock ");
        Serial.println(door);
        servo[door].write(0);
        return true;
    }
    return false;
}

boolean distance_okay_to_close_lock(int door)
{
    uint8_t res1 = get_door_distance_from_sensor(door);
    uint8_t res2 = get_door_distance_from_sensor(door);
    uint8_t res3 = get_door_distance_from_sensor(door);

    // empirical heuristic for distance sensor sensitivity
    return (res1 < MIN_DIST && res2 < MIN_DIST && res3 < MIN_DIST);
}

boolean distance_okay_to_open_lock(int door)
{
    uint8_t res1 = get_door_distance_from_sensor(door);
    uint8_t res2 = get_door_distance_from_sensor(door);
    uint8_t res3 = get_door_distance_from_sensor(door);

    // empirical heuristic for distance sensor sensitivity
    return (res1 >= MIN_DIST && res2 >= MIN_DIST && res3 >= MIN_DIST) && (res1 < MAX_DIST && res2 < MAX_DIST && res3 < MAX_DIST);
}

/* --------------------------- esp32cam functions --------------------------- */

void listen_for_esp32cam()
{
    boolean success;
    int locker_num;

    if (STATE == NO_INPUT)
    {
        String msg = read_esp32cam_message();
        Serial.println(msg);
        if (!msg.startsWith(OPEN_DOOR_MSG))
        {
            Serial.println("msg isn't OPEN");
            return;
        }
        Serial.println("Received OPEN from esp32cam");
        g_door = read_esp32cam_message().toInt(); // TODO Yehonatan & Omer: is this the correct thing to do?

        STATE = INPUT_DETECTED;
        Serial.println("switching to INPUT_DETECTED");
        open_lock(locker_num);
    }

    else
    {
        state_machine_for_input_detected_state(g_door);
    }
}

String read_esp32cam_message()
{
    char ch;
    String msg = EMPTY_STR;

    do
    {
        if (!esp.available())
        {
            Serial.println("esp not available");
            return EMPTY_STR;
        }
        ch = esp.read();
        // Serial.println(ch);
        if (ch == -1)
            return EMPTY_STR;
        msg += String(ch);
    } while (ch != MSG_SUFFIX);

    return msg;
}

void listen_for_webserver_for_deposit()
{
    // TODO
}

/* -------------------------------------------------------------------------- */
/*                             arduino boilerplate                            */
/* -------------------------------------------------------------------------- */

void setup()
{
    Serial.begin(BAUD);

    // put your setup code here, to run once:
    servo[0].attach(8);
    servo[1].attach(4);
    servo[2].attach(5);
    servo[3].attach(9);
    servo[0].write(0);
    servo[1].write(0);
    servo[2].write(0);
    servo[3].write(0);
    delay(2000);

    // setup_nfc();
    setup_distance_sensor();
    setup_esp32cam_comm();
}

void loop()
{
    //Serial.print(STATE, DEC);
    //Serial.println("");
    listen_for_nfc();
    listen_for_esp32cam();
    listen_for_webserver_for_deposit();
    delay(500);
}