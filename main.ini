#include <Servo.h>
#include <SoftwareSerial.h>
#include <PN532_SWHSU.h>
#include <PN532.h>

// Distance sensor globals
#define echoPin 2 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 3 //attach pin D3 Arduino to pin Trig of HC-SR04
long duration;    // variable for the duration of sound wave travel
int distance;     // variable for the distance measurement

// NFC globals
SoftwareSerial SWSerial(10, 11); // RX, TX
PN532_SWHSU pn532swhsu(SWSerial);
PN532 nfc(pn532swhsu);

// Locks globals
Servo servo;

void setup_distance_sensor()
{
    pinMode(trigPin, OUTPUT);                         // Sets the trigPin as an OUTPUT
    pinMode(echoPin, INPUT);                          // Sets the echoPin as an INPUT
    Serial.begin(9600);                               // // Serial Communication is starting with 9600 of baudrate speed
    Serial.println("Ultrasonic Sensor HC-SR04 Test"); // print some text in Serial Monitor
    Serial.println("with Arduino UNO R3");
}

void setup_nfc()
{
    Serial.begin(115200);
    Serial.println("Hello Maker!");
    nfc.begin();
    uint32_t versiondata = nfc.getFirmwareVersion();

    if (!versiondata)
    {
        Serial.print("Didn't Find PN53x Module");
        while (1)
            ; // Halt
    }

    // Got valid data, print it out!

    Serial.print("Found chip PN5");
    Serial.println((versiondata >> 24) & 0xFF, HEX);

    Serial.print("Firmware ver. ");
    Serial.print((versiondata >> 16) & 0xFF, DEC);

    Serial.print('.');
    Serial.println((versiondata >> 8) & 0xFF, DEC);

    // Configure board to read RFID tags

    nfc.SAMConfig();

    Serial.println("Waiting for an ISO14443A Card ...");
}

void open_door()
{
    servo.write(90);
}

int get_door_distance_from_sensor()
{
    // Clears the trigPin condition
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);

    // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    // Reads the echoPin, returns the sound wave travel time in microseconds
    duration = pulseIn(echoPin, HIGH);

    // Calculating the distance
    distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)

    // Displays the distance on the Serial Monitor
    Serial.print("Distance: ");
    Serial.print(distance);
    Serial.println(" cm");
    return distance;
}

void listen_for_nfc()
{
    Serial.print(servo.read());
    if (servo.read() != 0 && get_door_distance_from_sensor() < 10)
    {
        Serial.print("Closing door");
        servo.write(0);
    }

    boolean success;
    uint8_t uid[] = {0, 0, 0, 0, 0, 0, 0}; // Buffer to store the returned UID
    uint8_t uidLength;                     // Length of the UID (4 or 7 bytes depending on ISO14443A card type)

    success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength);
    if (success)
    {
        Serial.println("Found A Card!");

        Serial.print("UID Length: ");
        Serial.print(uidLength, DEC);
        Serial.println(" bytes");

        Serial.print("UID Value: ");
        for (uint8_t i = 0; i < uidLength; i++)
        {
            Serial.print(" 0x");
            Serial.print(uid[i], HEX);
        }

        open_door();

        Serial.println("");
        delay(2000);
    }

    else
    {
        // PN532 probably timed out waiting for a card
        // Serial.println("Timed out! Waiting for a card...");
    }
}

void setup()
{
    // put your setup code here, to run once:
    servo.attach(8);
    servo.write(0);
    delay(2000);

    setup_nfc();
    setup_distance_sensor();
}

void loop()
{
    // put your main code here, to run repeatedly:
    listen_for_nfc();
}